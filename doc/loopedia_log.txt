Here are the points, that I have to figure out in Drupal:

-> Where are Pictures (jpg, and possible files like pdf) stored?

     They are Stored in /var/www/html/mysite/sites/default/files/


-> Revision of Project / Backups:

     You can just make a git repository of /var/www/html/mysite/sites/
     There is already a .gitignore file that excludes the "files"
     folder from being tracked. Not many changes are made here,
     howewer. Most of the configurations and content is stored in the
     database.

     To make a backup of the database you can use drush:
     ~$ drush cc all
     ~$ drush sql-dump --ordered-dump > ~/my-sql-dump-file-name.sql

     The first line clears the caches of drupal and the second one
     dumps the database into the given sql-file.

     Now to import the sql file you have to use the following
     commands:
     ~$ drush sql-drop           # this deletes the current drupal
                                 # database
     ~$ drush sql-cli < /path/to/my-sql-dump-file-name.sql

     voila.

-> Revision of Content in Drupal:

   After creation our content can be changed. We want to keep track of
   these changes. Firstly you can turn on revisioning for a content
   type in structure > content types > mycontent > (edit) > publishing
   options. This way the system keeps revisioning snapshots of the
   content each time it is updated.

   Then there is a Module named Diff, which shows differcneces between
   revision snapshots as a normal text diff.


-> Installing Drush:

   https://www.drupal.org/project/drush


-> Setting up Drupal with drush

   set up mysql user and database:
   ~$ mysql -u root -p
   mysql> CREATE USER 'wernerheisenberg'@'localhost' IDENTIFIED BY 'iwouldnevertortureacat';
   mysql> CREATE DATABASE loopedia_drupal_test;
   mysql> GRANT ALL PRIVILEGES ON loopedia_drupal_test.* TO 'wernerheisenberg'@'localhost';
   mysql> exit;
   ~$ cd /to/your/site/
   ~$ drush dl drupal-7.x
   ~$ (rename generated drupal-7.x_dev/ folder into loopedia/)
   in browser: localhost/loopedia -> rest of configuration


-> What fields should my content type "integral" store?




2016-01-14: I used the drupal module "features" to define a custom node
type and export it to a module. This module is in
/drupal/modules/integral_feature.

I also copied the node example module from the examples-module to
/doc/drupal/node_example_original/


2016-02-24; The search for a drupal search module goes on. As a backend,
I decided to use "Solr", a search engine (backend) developed by apache.
This is open source and seems to be very powerful because it is made for
large sites with a lot of traffic. And I chose the drupal module Search
API as the search module. They are often used together by many sites and
are both well maintained. Here one comparison:
http://drupal.stackexchange.com/questions/15508/search-api-vs-apache-solr-search-integration-in-drupal-7

Interesting websites for Search API:
https://www.drupal.org/project/search_api_solr
https://www.drupal.org/node/1999262

For the installation of Solr I pretty much used this guide:
(https://www.drupal.org/node/2502221)  It is straight forward. Only the
automatic start as a service, I did not managed to do. Also, on the real
server we have to restrict access to the solr web interface and server.


2016-03-02 Drupal on virtual Suse:
- Install Opensuse on virtual machine and make an update
- Install apache2
- Configure apache2 through Yast: "HTTP Server"

The problem of yesterday was that the server gave a permission error
site. I used soft links to link from the /srv/www/htdocs/ folder to the
drupal folder in my home directory. Apparently apache2 is configured to
not follow symlinks. I copied the drupal folder into /srv/www/htdocs/
and now it works!


2016-04-14

Drupal programming best practices:
https://www.drupal.org/node/287350

This is a nice series of articles about best practices in Drupal
programming and configuration. Especially the first one
[https://www.drupal.org/node/2461383] suggests how to structure drupal
for a production site while being able to develop and test new features.


2016-04-15

One of the main features of Loopedia should be that users can add
references and results to existing integrals. So one integral may have
several references/results. This is sort of tricky to implement because
users should not be able to edit/delete stuff that doesn't belong to
them.

One solution to this problem may be the module "Relation" (by
naught101).


One other solution is the module "Field Collection". Which does 90% of
exactly what I want:

* It lets me define a field collection, consisting of several fields.
  This field colloction can be added as a "field" to nodes (and possibly
  other entities). And this "field" can be set to store unlimited number
  of input, which is what I need.

* In the view of the node you see now some links for editing the
  fieldset on its own. This is exactly the behavior I need! Being able
  to add information as a field collection without having to edit the
  whole node itself.

The only downside is that I haven't found a simple way to define user
permissions for this case. The structure is that this field collection
is used as a field in the node and this field is configured to store
several (unlimited) different instances. Now it is tricky to define
permissions for each of these instances instead of permissions for all
instances because they are one "field".

The reason for this problem is that a field collection doesn't store
ownership information. (And for most cases this is fine because a field
collection knows which node it belongs to; and this node has a user ID
'uid'.)

So I'm trying to make field collection store the author information as
well. Luckily, field collections are stored entities, to which the
"Entity API" module provides useful hooks.

Here is some information about Entities in general:
http://www.bluespark.com/blog/drupal-entities-part-1-moving-beyond-nodes
https://evolvingweb.ca/blog/understanding-entity-api-module


Since field collections are extended classes of entities, we can use
Entity metadata
[wrappers](https://www.drupal.org/documentation/entity-metadata-wrappers)
to write the user metadata to the field collections.
