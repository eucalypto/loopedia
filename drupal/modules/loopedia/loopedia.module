<?php

/**
 * @file
 * Module file for my Loopedia Module
 */



/**
 * Implements hook_node_info().
 *
 * We use hook_node_info() to define the loopedia node content type.
 */
function loopedia_node_info()
{
  return array(
    'lop_integral' => array(
      'name' => t('Integral'),
      // 'base' should be the (machine) name of the module. If it is
      // not, this content type will not appear in structure -> content
      // type.
      'base' => 'loopedia',
      'description' => t('This is the node type for Feynman Integrals'),
      'has_title' => '1',
      'title_label' => t('Integral Title'),
      // 'help' => t('This is an explanation that should help you.')
    ),
  );
}


/**
 * Implements hook_form().
 *
 * This is the form that the user sees when he wants to upload an integral.
 *
 */
function loopedia_form($node, $form_state) {
  // node_content_form() is the standard function that returns a form. It is
  // provided by the "node" module.
  return node_content_form($node, $form_state);
}


/** Implements hook_form_alter().
 *
 */
function loopedia_form_alter(&$form, &$form_state, $form_id)
{
  // dpm($form_id, '$form_id');
  // dpm($form, '$form');
  // dpm($form_state, '$form_state');
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Here, we want to change the standard submission form to a more custom
 * version.
 */
function loopedia_form_lop_integral_node_form_alter(&$form, &$form_state, $form_id)
{
  // Load file `loopedia.integral.inc`, where all the callback functions
  // for the Loopedia integral submission form are defined.
  form_load_include($form_state, 'inc', 'loopedia', 'loopedia.integral');

  // // Add an extra validate function
  // $form['#validate'][] = $form['#validate'][0];
  // $form['#validate'][0] = 'loopedia_lop_integral_form_validate';

  // Here we try to auto-check the checkbox that triggers a revision
  // control
  $form['revision_information']['revision']['#default_value'] = 1;



  // lop_picture_path will never be visible because we store here the
  // path to the generated picture of the integral.
  // $form['lop_picture_path']['#pre_render'] = array('loopedia_empty_array');
  $form['lop_picture_path']['#attributes']['class']['hide_me'] = 'element-hidden';

  // // We want so set a value for a field through our srcipts. But the
  // // user still wants to see the value that we put in. The way to go is
  // // this. Define "#default_value" here in form_alter() and it will be
  // // put into the generated form.
  // $form['lop_light_like_leg_number']['und'][0]['value']['#default_value'] = '123';




  // // If you want to hide a field in a form, this seems like the way to
  // // go. You define an '#attributes' to a field  in the following
  // // manner. This just marks the form invisible in css. If the user
  // // turns css off, he still can see the field. See
  // // http://drupal.stackexchange.com/questions/7199/how-to-hide-and-or-prevent-access-to-fields-in-a-form-such-as-group-audience-f
  // // This way, you can still populate a field with #default_value and it
  // // will even be validated.
  // //
  // // An alternative way could be using '#prefix'
  // // and '#suffix' according to https://www.drupal.org/node/728398
  // $form['lop_leg_number']['#attributes']['class']['hide_me'] = 'element-hidden';
  // $form['lop_leg_number']['und'][0]['value']['#default_value'] = 'b200';


  // We control the steps of the form with $form_state['step']. If it is
  // not set, we must be on the first page. So we set it to 1. If
  // it is set, we obviously don't want to change it here.
  if (!isset($form_state['step']))
  {
    $form_state['step'] = 1;
  }


  // Decide what to do according to the 'step' variable:
  switch ($form_state['step'])
  {
    case 1:
      loopedia_integral_first_step($form, $form_state);
      break;
    case 2:
      loopedia_integral_second_step($form, $form_state);
      break;
    case 3:
      loopedia_integral_third_step($form, $form_state);
      break;
  }



  // // Here, we put the two fields for each propagator into one fieldset.
  // for ($i = 1; $i <= 12; $i++)
  // {
  //   $form['prop_' . $i] = array(
  //     '#type' => 'fieldset',
  //     '#title' => 'Propagator ' . $i,
  //     '#description' => t('This is the description of the fieldset for the Propagator.'),
  //     '#collapsible' => FALSE,
  //     'lop_propagator_' . $i . '_mass' => $form['lop_propagator_' . $i . '_mass'],
  //     'lop_propagator_' . $i . '_power' => $form['lop_propagator_' . $i . '_power'],
  //     // '#weight' => -4,
  //   );
  //   unset($form['lop_propagator_' . $i . '_mass'],
  //         $form['lop_propagator_' . $i . '_power']);
  // }

  // dpm($form_state, '$form_state');
  // dpm($form, '$form');
}




/**
 * Returns an empty array
 *
 * This is used here to hide fields by setting '#pre_render' to this
 * function.
 */
function loopedia_empty_array()
{
  return array();
}









// /**
//  *  Validate handler for the nickel index
//  */
// function loopedia_lop_nickel_validate($element, $form_state)
// {
//   // dpm($element, '$element');
// }


// /**
//  * Callback function for extra form validation of the integral node
//  * type.
//  */
// function loopedia_lop_integral_form_validate($form, &$form_state)
// {
//   dsm('I am loopedia_lop_integral_form_validate ' . microtime(TRUE) );
//   dpm($form_state, '$form_state');
//   dpm($form, '$form');
// }



//**********************************************************ooo

/**
 * Implements hook_node_view_alter()
 *
 * This function alters the display of the nodes
 */
function loopedia_node_view_alter(&$build)
{
  // Check if the node is lop_integral
  if ($build['#bundle'] == 'lop_integral')
  {
    // Check if picture_path is displayed. If yes, replace it with the
    // generated picture.
    if (isset($build['lop_picture_path']))
    {
      unset($build['lop_picture_path']);
      $path = $build['lop_nickel']['#object']->lop_picture_path['und'][0]['value'];
      // Display generated Feynman Graph
      $build['feynman_graph'] = array(
        '#type' => 'markup',
        '#prefix' => '<img src="',
        '#markup' => $path,
        '#suffix' => ' " alt="Generated Feynman Graph">',
        '#weight' => 0,
      );
    }
  }
  // dpm($build);
}



/**
* Implements of hook_init().
*
* This function can be used for dirty debugging because it is executed
* on all page requests that are not cached.
*/
function loopedia_init() {
  // $arr = array();
  // $i = 13;
  // $arr['bla' . $i . 'blub'] = 'yes' . ' no' . $i . ' maybe';
  // dpm($arr);
  // drupal_set_message('Beware I live!');
  // $types = node_type_get_types();
  // dpm($types);
  //
  // $type = node_type_load('lop-integral');
  // dpm($type);
  // $instance_info = field_info_instance('node', 'field_blabla', 'article');
  // dpm($instance_info);
  //
  // $fieldinfo = field_info_field('loopedia_term_reference');
  // dpm($fieldinfo);
  // dpm(hook_field_storage_info());
}
