<?php


/**
 * Implements hook_enable().
 *
 */
function loopedia_enable()
{
  // Taxonomy:
  // This is taken from  http://www.webomelette.com/taxonomy-vocabulary-term-programatically-drupal-7
  // I saved this site in "loopedia_reference_collection/web_pages/How
  // to Create Taxonomy Vocabularies and Terms Programatically in Drupal
  // 7.pdf". This Text uses the hook_install() to save the vocabulary;
  // but we want to be able to update the vocabulary after installation.
  // This is why we used the hook_enable(); we just have to update this
  // code and disable atnd (re-)enable the module.
  foreach (_loopedia_taxonomy_definition() as $tax)
  {
    // Vocabulary:
    _loopedia_save_or_update_vocabulary($tax);
    // Terms:
    _loopedia_save_or_update_taxonomy_terms($tax);
  }


  // Custom content type loopedia_integral:
  node_types_rebuild();
  _loopedia_update_custom_fields(
    _loopedia_integral_installed_fields(),
    _loopedia_integral_installed_instances()
  );
}
// end of hook_enable()




/**
 * Implements hook_install().
 */
function loopedia_install() {
  // Custom node type and its fields:
  node_types_rebuild();
  _loopedia_create_custom_fields(
    _loopedia_integral_installed_fields(),
    _loopedia_integral_installed_instances()
  );
}




/**
* Implements hook_uninstall().
*
* This function is called when we uninstall the module.
*/
function loopedia_uninstall()
{
  // Taxonomy:
  $vocab = taxonomy_vocabulary_machine_name_load('loopedia_test_vocabulary');
  taxonomy_vocabulary_delete($vocab->vid);


  // Custom node type and fields:
  foreach (array_keys(_loopedia_integral_installed_fields()) as $field)
  {
    field_delete_field($field);
  }

  $instances = field_info_instances('node', 'loopedia_integral');
  foreach ($instances as $instance_name => $fieldinstance)
  {
    field_delete_instance($fieldinstance);
  }
}
// end of hook_uninstall()




// ****************************************************
// Helper functions:


/**
 * Saves or updates vocabulary.
 *
 * This function is used to save a (new) vocabulary. If a vocabulary
 * with the same machine name already exists, it is updated.
 *
 * @param associative array $voc
 *   This array must have the following key-value pairs:
 *     'name' => string
 *     'machine_name' => string
 *     'description' => string
 *
 * @see hook loopedia_enable()
 */
function _loopedia_save_or_update_vocabulary($voc)
{
  $new_vocab = new stdClass();
  $new_vocab->name = $voc['name'];
  $new_vocab->machine_name = $voc['machine_name'];
  $new_vocab->description = $voc['description'];

  // The following part checks if the vocabulary already exists. If it
  // finds an existing machine name it sets the corresponding vid. This
  // "vid" has to be set if we want to update a vocabulary (and not
  // create a new one).
  // https://api.drupal.org/api/drupal/modules!taxonomy!taxonomy.module/function/taxonomy_vocabulary_save/7
  //
  $vocab_temp = taxonomy_vocabulary_machine_name_load(
                  $new_vocab->machine_name);
  if ($vocab_temp != FALSE) {
    $new_vocab->vid = $vocab_temp->vid;
  }

  // Now we can give our newly created vocabulary object "new_vocab" to
  // the save function. This function only accepts (class) objects as
  // arguments; not arrays.
  taxonomy_vocabulary_save($new_vocab);
}
// end of function loopedia_save_or_update_vocabulary()





/**
 * Saves or updates taxonomy terms.
 *
 * @param associative array $voc
 *   Holds the definitions of the vocabulary; including terms. The
 *   following parts of the array are used in this function:
 *     'machine_name' -> string
 *     'terms' -> array
 */

function _loopedia_save_or_update_taxonomy_terms($voc)
{
  // We load the vocabulary object with its machine name. This object
  // contains the vid (vocabulary id), which we need to load the
  // existing terms.
  $vocab = taxonomy_vocabulary_machine_name_load($voc['machine_name']);
  $existing_terms = taxonomy_get_tree($vocab->vid);

  // Saving the terms
  foreach ($voc['terms'] as $term)
  {
    $term_new = new stdClass();
    $term_new->name = $term['name'];
    $term_new->description = $term['description'];
    $term_new->vid = $vocab->vid;

    // Each taxonomy term gets an identification number "tid" after it
    // is created. taxonomy_term_save() doesn't check if a term already
    // exists but just makes a duplicate (with different tid). This is
    // why we are checking if a taxonomy term with the same name already
    // exists. If yes, we copy the existing tid to the new term object.
    // Now taxonomy_term_save() recognizes the given "tid" and updates
    // the term instead of creating a new one.
    foreach ($existing_terms as $term_e)
    {
      if ($term_e->name == $term_new->name)
      {
        $term_new->tid = $term_e->tid;
      }
    }
    taxonomy_term_save($term_new);
  }

}
// end of function loopedia_save_or_update_taxonomy_terms()




/**
 * Creates custom fields and instances.
 *
 * @param array $fields_def
 *   An array defining the fields. For example
 *   _loopedia_integral_installed_fields() returns such an array.
 *
 * @param array $field_instances_def
 *   An array defining the field instances. For example
 *   _loopedia_integral_installed_instances() returns such an array.
 */
 function _loopedia_create_custom_fields($fields_def, $field_instances_def)
 {
   foreach ($fields_def as $field)
   {
     field_create_field($field);
   }

   foreach ($field_instances_def as $instance)
   {
    field_create_instance($instance);
   }
 }


 /**
  * Uptades custom fields and instances.
  *
  * @param array $fields_def
  *   An array defining the fields. For example
  *   _loopedia_integral_installed_fields() returns such an array.
  *
  * @param array $field_instances_def
  *   An array defining the field instances. For example
  *   _loopedia_integral_installed_instances() returns such an array.
  */
  function _loopedia_update_custom_fields($fields_def, $field_instances_def)
  {
    foreach ($fields_def as $field)
    {
      field_update_field($field);
    }

    foreach ($field_instances_def as $instance)
    {
      field_update_instance($instance);
    }
  }









// *********************************************************
// Concrete definitions; "Data"; could also be put into a separate file.


// Taxonomy:

/**
 * Defines the vocabularies (including terms) for our taxonomy.
 *
 * @return array $tax_def
 *   Just returns the defining array $tax_def
 */
function _loopedia_taxonomy_definition()
{
  $tax_def = array();

  // Loopedia test vocabulary
  $tax_def[1] = array(
    'name' => 'Loopedia Test Vocabulary',
    'machine_name' => 'loopedia_test_vocabulary',
    'description' => 'This vocabulary has no special purpose except testing.',
    'terms' => array(
      array(
        'name' => 'Term 1',
        'description' => 'This is term 1.',
      ),
      array(
        'name' => 'Term 2',
        'description' => 'This is term 2.',
      ),
      array(
        'name' => 'Term 3',
        'description' => 'This is term 3.',
      ),
      array(
        'name' => 'blabla',
        'description' => 'This is blabla.'
      ),
    ),
  );


  return $tax_def;
}





// Node fields and instances:

/**
 * Defines fields for the loopedia integral cnotent type.
 *
 * This is done here for readability reasons..
 *
 * @return array
 *   An associative array specifying the fields we wish to add to our
 *   loopedia node type.
 */
function _loopedia_integral_installed_fields()
{
  $field_bases = array();

  $field_bases['loopedia_long_text'] = array(
    'active' => 1,
    'cardinality' => -1,
    'deleted' => 0,
    'entity_types' => array(),
    'field_name' => 'loopedia_long_text',
    'indexes' => array(
      'format' => array(
        0 => 'format',
      ),
    ),
    'locked' => 0,
    'module' => 'text',
    'settings' => array(),
    'translatable' => 0,
    'type' => 'text_long',
  );

  $field_bases['loopedia_numbers'] = array(
    'active' => 1,
    'cardinality' => -1,
    'deleted' => 0,
    'entity_types' => array(),
    'field_name' => 'loopedia_numbers',
    'indexes' => array(),
    'locked' => 0,
    'module' => 'number',
    'settings' => array(),
    'translatable' => 0,
    'type' => 'number_integer',
  );

  $field_bases['loopedia_term_reference'] = array(
    'active' => 1,
    'cardinality' => 1,
    'deleted' => 0,
    'entity_types' => array(),
    'field_name' => 'loopedia_term_reference',
    'indexes' => array(
      'tid' => array(
        0 => 'tid',
      ),
    ),
    'locked' => 1,
    'module' => 'taxonomy',
    'settings' => array(
      'allowed_values' => array(
        0 => array(
          'vocabulary' => 'loopedia_test_vocabulary',
          'parent' => 0,
        ),
      ),
    ),
    'translatable' => 0,
    'type' => 'taxonomy_term_reference',
  );

  $field_bases['loopedia_text'] = array(
    'active' => 1,
    'cardinality' => 1,
    'deleted' => 0,
    'entity_types' => array(),
    'field_name' => 'loopedia_text',
    'indexes' => array(
      'format' => array(
        0 => 'format',
      ),
    ),
    'locked' => 0,
    'module' => 'text',
    'settings' => array(
      'max_length' => 255,
    ),
    'translatable' => 0,
    'type' => 'text',
  );

  return $field_bases;
}



/**
 * Defines the field instances for loopedia_integral content type.
 *
 * @return array
 *   An associative array specifying the instances of fields we wish to
 *   add to loopedia_integral
 */
function _loopedia_integral_installed_instances()
{
  $field_instances = array();

  $field_instances['loopedia_integral-loopedia_long_text'] = array(
    'bundle' => 'loopedia_integral',
    'default_value' => NULL,
    'deleted' => 0,
    'description' => 'Help textt',
    'display' => array(
      'default' => array(
        'label' => 'above',
        'module' => 'text',
        'settings' => array(),
        'type' => 'text_default',
        'weight' => 3,
      ),
      'teaser' => array(
        'label' => 'above',
        'settings' => array(),
        'type' => 'hidden',
        'weight' => 0,
      ),
    ),
    'entity_type' => 'node',
    'field_name' => 'loopedia_long_text',
    'label' => 'loopedia long text',
    'required' => 1,
    'settings' => array(
      'text_processing' => 0,
      'user_register_form' => FALSE,
    ),
    'widget' => array(
      'active' => 1,
      'module' => 'text',
      'settings' => array(
        'rows' => 5,
      ),
      'type' => 'text_textarea',
      'weight' => -1,
    ),
  );

  $field_instances['loopedia_integral-loopedia_numbers'] = array(
    'bundle' => 'loopedia_integral',
    'default_value' => NULL,
    'deleted' => 0,
    'description' => 'This is the help text for Features numbers',
    'display' => array(
      'default' => array(
        'label' => 'above',
        'module' => 'number',
        'settings' => array(
          'decimal_separator' => '.',
          'prefix_suffix' => TRUE,
          'scale' => 0,
          'thousand_separator' => '',
        ),
        'type' => 'number_integer',
        'weight' => 1,
      ),
      'teaser' => array(
        'label' => 'above',
        'settings' => array(),
        'type' => 'hidden',
        'weight' => 0,
      ),
    ),
    'entity_type' => 'node',
    'field_name' => 'loopedia_numbers',
    'label' => 'Features numbers',
    'required' => 1,
    'settings' => array(
      'max' => 2048,
      'min' => 10,
      'prefix' => '',
      'suffix' => '',
      'user_register_form' => FALSE,
    ),
    'widget' => array(
      'active' => 0,
      'module' => 'number',
      'settings' => array(),
      'type' => 'number',
      'weight' => -3,
    ),
  );

  $field_instances['loopedia_integral-loopedia_term_reference'] = array(
    'bundle' => 'loopedia_integral',
    'default_value' => NULL,
    'deleted' => 0,
    'description' => 'Help text',
    'display' => array(
      'default' => array(
        //
        // 'label' specifies how the label is displayed:
        // 'above' means the label is above the field content
        // 'inline' means the label is dispalyed on the same line as the
        //          field content.
        'label' => 'above',
        'module' => 'taxonomy',
        'settings' => array(),
        //
        // 'type' determines how it is displayed:
        // 'taxonomy_term_reference_link' -> link
        // 'taxonomy_term_reference_plain' -> Plain text
        // 'taxonomy_term_reference_rss_category' -> RSS category
        // 'hidden' -> <Hidden> ; not visible
        'type' => 'taxonomy_term_reference_link',
        'weight' => 2,
      ),
      'teaser' => array(
        'label' => 'above',
        'settings' => array(),
        'type' => 'hidden',
        'weight' => 0,
      ),
    ),
    'entity_type' => 'node',
    'field_name' => 'loopedia_term_reference',
    'label' => 'features term reference',
    'required' => 0,
    'settings' => array(
      'user_register_form' => FALSE,
    ),
    'widget' => array(
      'active' => 1,
      'module' => 'options',
      'settings' => array(),
      // type:
      // 'options_selectoptions_select' -> Select list
      // 'options_buttons' -> Check boxes/radio buttons
      // 'taxonomy_autocomplete' -> Autocomplete term widget (tagging)
      'type' => 'options_selectoptions_select',
      'weight' => 4,
    ),
  );

  // Exported field_instance: 'node-features_integral-field_features_text'.
  $field_instances['loopedia_integral-loopedia_text'] = array(
    'bundle' => 'loopedia_integral',
    'default_value' => array(
      0 => array(
        'value' => 'default value',
      ),
    ),
    'deleted' => 0,
    'description' => 'This is the help text for the features text field',
    'display' => array(
      'default' => array(
        'label' => 'above',
        'module' => 'text',
        'settings' => array(),
        'type' => 'text_default',
        'weight' => 0,
      ),
      'teaser' => array(
        'label' => 'above',
        'settings' => array(),
        'type' => 'hidden',
        'weight' => 0,
      ),
    ),
    'entity_type' => 'node',
    'field_name' => 'loopedia_text',
    'label' => 'Short text',
    'required' => 1,
    'settings' => array(
      'text_processing' => 0,
      'user_register_form' => FALSE,
    ),
    'widget' => array(
      'active' => 1,
      'module' => 'text',
      'settings' => array(
        'size' => 60,
      ),
      'type' => 'text_textfield',
      'weight' => -4,
    ),
  );

  return $field_instances;
}
