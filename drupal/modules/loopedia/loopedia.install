<?php


/**
 * Implements hook_enable().
 *
 */
function loopedia_enable()
{
  // // Taxonomy:
  // // This is taken from  http://www.webomelette.com/taxonomy-vocabulary-term-programatically-drupal-7
  // // I saved this site in "loopedia_reference_collection/web_pages/How
  // // to Create Taxonomy Vocabularies and Terms Programatically in Drupal
  // // 7.pdf". This Text uses the hook_install() to save the vocabulary;
  // // but we want to be able to update the vocabulary after installation.
  // // This is why we used the hook_enable(); we just have to update this
  // // code and disable atnd (re-)enable the module.
  // foreach (_loopedia_taxonomy_definition() as $tax)
  // {
  //   // Vocabulary:
  //   _loopedia_save_or_update_vocabulary($tax);
  //   // Terms:
  //   _loopedia_save_or_update_taxonomy_terms($tax);
  // }


  // Custom content type loopedia_integral:
  node_types_rebuild();
  _loopedia_create_or_update_custom_fields(
    _loopedia_integral_installed_fields(),
    _loopedia_integral_installed_instances()
  );
}
// end of hook_enable()




// /**
//  * Implements hook_install().
//  */
// function loopedia_install() {
//   // Custom node type and its fields:
//   node_types_rebuild();
//   _loopedia_create_custom_fields(
//     _loopedia_integral_installed_fields(),
//     _loopedia_integral_installed_instances()
//   );
// }




/**
* Implements hook_uninstall().
*
* This function is called when we uninstall the module.
*/
function loopedia_uninstall()
{
  // // Taxonomy:
  // $vocab = taxonomy_vocabulary_machine_name_load('lop_test_vocabulary');
  // taxonomy_vocabulary_delete($vocab->vid);


  // Custom node type and fields:
  foreach (array_keys(_loopedia_integral_installed_fields()) as $field)
  {
    field_delete_field($field);
  }

  $instances = field_info_instances('node', 'lop_integral');
  foreach ($instances as $instance_name => $fieldinstance)
  {
    field_delete_instance($fieldinstance);
  }
}
// end of hook_uninstall()




// ****************************************************
// Helper functions:


/**
 * Saves or updates vocabulary.
 *
 * This function is used to save a (new) vocabulary. If a vocabulary
 * with the same machine name already exists, it is updated.
 *
 * @param associative array $voc
 *   This array must have the following key-value pairs:
 *     'name' => string
 *     'machine_name' => string
 *     'description' => string
 *
 * @see hook loopedia_enable()
 */
function _loopedia_save_or_update_vocabulary($voc)
{
  $new_vocab = new stdClass();
  $new_vocab->name = $voc['name'];
  $new_vocab->machine_name = $voc['machine_name'];
  $new_vocab->description = $voc['description'];

  // The following part checks if the vocabulary already exists. If it
  // finds an existing machine name it sets the corresponding vid. This
  // "vid" has to be set if we want to update a vocabulary (and not
  // create a new one).
  // https://api.drupal.org/api/drupal/modules!taxonomy!taxonomy.module/function/taxonomy_vocabulary_save/7
  //
  $vocab_temp = taxonomy_vocabulary_machine_name_load(
                  $new_vocab->machine_name);
  if ($vocab_temp != FALSE) {
    $new_vocab->vid = $vocab_temp->vid;
  }

  // Now we can give our newly created vocabulary object "new_vocab" to
  // the save function. This function only accepts (class) objects as
  // arguments; not arrays.
  taxonomy_vocabulary_save($new_vocab);
}
// end of function loopedia_save_or_update_vocabulary()





/**
 * Saves or updates taxonomy terms.
 *
 * @param associative array $voc
 *   Holds the definitions of the vocabulary; including terms. The
 *   following parts of the array are used in this function:
 *     'machine_name' -> string
 *     'terms' -> array
 */

function _loopedia_save_or_update_taxonomy_terms($voc)
{
  // We load the vocabulary object with its machine name. This object
  // contains the vid (vocabulary id), which we need to load the
  // existing terms.
  $vocab = taxonomy_vocabulary_machine_name_load($voc['machine_name']);
  $existing_terms = taxonomy_get_tree($vocab->vid);

  // Saving the terms
  foreach ($voc['terms'] as $term)
  {
    $term_new = new stdClass();
    $term_new->name = $term['name'];
    $term_new->description = $term['description'];
    $term_new->vid = $vocab->vid;

    // Each taxonomy term gets an identification number "tid" after it
    // is created. taxonomy_term_save() doesn't check if a term already
    // exists but just makes a duplicate (with different tid). This is
    // why we are checking if a taxonomy term with the same name already
    // exists. If yes, we copy the existing tid to the new term object.
    // Now taxonomy_term_save() recognizes the given "tid" and updates
    // the term instead of creating a new one.
    foreach ($existing_terms as $term_e)
    {
      if ($term_e->name == $term_new->name)
      {
        $term_new->tid = $term_e->tid;
      }
    }
    taxonomy_term_save($term_new);
  }

}
// end of function loopedia_save_or_update_taxonomy_terms()




/**
 * Creates or updates custom fields and instances.
 *
 * @param array $fields_def
 *   An array defining the fields. For example
 *   _loopedia_integral_installed_fields() returns such an array.
 *
 * @param array $field_instances_def
 *   An array defining the field instances. For example
 *   _loopedia_integral_installed_instances() returns such an array.
 */
 function _loopedia_create_or_update_custom_fields($fields_def, $field_instances_def)
 {
   foreach ($fields_def as $field)
   {
     // Commentary
     if (field_info_field($field['field_name']) == NULL)
     {
       field_create_field($field);
     }
     else
     {
       field_update_field($field);
     }
   }

   foreach ($field_instances_def as $instance)
   {
     if (field_info_instance($instance['entity_type'], $instance['field_name'], $instance['bundle']) == NULL)
     {
       field_create_instance($instance);
     }
     else
     {
       field_update_instance($instance);
     }
   }
 }


 // /**
 //  * Uptades custom fields and instances.
 //  *
 //  * @param array $fields_def
 //  *   An array defining the fields. For example
 //  *   _loopedia_integral_installed_fields() returns such an array.
 //  *
 //  * @param array $field_instances_def
 //  *   An array defining the field instances. For example
 //  *   _loopedia_integral_installed_instances() returns such an array.
 //  */
 //  function _loopedia_update_custom_fields($fields_def, $field_instances_def)
 //  {
 //    foreach ($fields_def as $field)
 //    {
 //      field_update_field($field);
 //    }
 //
 //    foreach ($field_instances_def as $instance)
 //    {
 //      field_update_instance($instance);
 //    }
 //  }









// *********************************************************
// Concrete definitions; "Data"; could also be put into a separate file.


// Taxonomy:

/**
 * Defines the vocabularies (including terms) for our taxonomy.
 *
 * @return array $tax_def
 *   Just returns the defining array $tax_def
 */
function _loopedia_taxonomy_definition()
{
  $tax_def = array();

  // Loopedia test vocabulary
  $tax_def[1] = array(
    'name' => 'Loopedia Test Vocabulary',
    'machine_name' => 'lop_test_vocabulary',
    'description' => 'This vocabulary has no special purpose except testing.',
    'terms' => array(
      array(
        'name' => 'Term 1',
        'description' => 'This is term 1.',
      ),
      array(
        'name' => 'Term 2',
        'description' => 'This is term 2.',
      ),
      array(
        'name' => 'Term 3',
        'description' => 'This is term 3.',
      ),
      array(
        'name' => 'blabla',
        'description' => 'This is blabla.'
      ),
    ),
  );


  return $tax_def;
}





// Node fields and instances:

/**
 * Defines fields for the loopedia integral cnotent type.
 *
 * This is done here for readability reasons..
 *
 * @return array
 *   An associative array specifying the fields we wish to add to our
 *   loopedia node type.
 */
function _loopedia_integral_installed_fields()
{
  // If you change these two numbers, you should also change them in the
  // beginning of _loopedia_integral_installed_instances()
  //
  // $max_num_prop defines the maximal number of propagators that are
  // being stored.
  $max_num_prop = 21;
  // Define the maximal number of legs for each integral.
  $max_num_leg = 20;


  $field_bases = array();


  $field_bases['lop_nickel'] = array(
    'active' => 1,
    'cardinality' => 1,
    'deleted' => 0,
    'entity_types' => array(),
    'field_name' => 'lop_nickel',
    'indexes' => array(
      'format' => array(
        0 => 'format',
      ),
    ),
    'locked' => 0,
    'module' => 'text',
    'settings' => array(
      'max_length' => 512,
    ),
    'translatable' => 0,
    'type' => 'text',
  );

  $field_bases['lop_picture_path'] = array(
    'active' => 1,
    'cardinality' => 1,
    'deleted' => 0,
    'entity_types' => array(),
    'field_name' => 'lop_picture_path',
    'indexes' => array(
      'format' => array(
        0 => 'format',
      ),
    ),
    'locked' => 0,
    'module' => 'text',
    'settings' => array(
      'max_length' => 512,
    ),
    'translatable' => 0,
    'type' => 'text',
  );

  $field_bases['lop_comment'] = array(
      'active' => 1,
      'cardinality' => 1,
      'deleted' => 0,
      'entity_types' => array(),
      'field_name' => 'lop_comment',
      'indexes' => array(
        'format' => array(
          0 => 'format',
        ),
      ),
      'locked' => 0,
      'module' => 'text',
      'settings' => array(),
      'translatable' => 0,
      'type' => 'text_long',
    );

    // This defines the allowed values for the virtuality of the
    // external legs.
    $allowed_values_virt = array(
      'light-like' => 'light-like',
      // 'on_internal_mass_shell' => 'on_internal_mass_shell',
      'off-shell' => 'off-shell',
    );
    for ($j = 1; $j <= $max_num_prop; $j++)
    {
      $allowed_values_virt['m' . $j . '^2'] = 'm' . $j . '^2';
    }


    // Define one field for each external leg, which stores the
    // virtuality of the leg.
    for ($i = 1; $i <= $max_num_leg; $i++)
    {
      $field_bases['lop_ext_leg_' . $i . '_virt'] = array(
        'active' => 1,
        'cardinality' => 1,
        'deleted' => 0,
        'entity_types' => array(),
        'field_name' => 'lop_ext_leg_' . $i . '_virt',
        'indexes' => array(
          'value' => array(
            0 => 'value',
          ),
        ),
        'locked' => 0,
        'module' => 'list',
        'settings' => array(
          'allowed_values' => $allowed_values_virt,
          'allowed_values_function' => '',
        ),
        'translatable' => 0,
        'type' => 'list_text',
      );
    }



    $field_bases['lop_literature_arxiv'] = array(
      'active' => 1,
      'cardinality' => 1,
      'deleted' => 0,
      'entity_types' => array(),
      'field_name' => 'lop_literature_arxiv',
      'indexes' => array(
        'format' => array(
          0 => 'format',
        ),
      ),
      'locked' => 0,
      'module' => 'text',
      'settings' => array(
        'max_length' => 512,
      ),
      'translatable' => 0,
      'type' => 'text',
    );

    $field_bases['lop_literature_publication'] = array(
      'active' => 1,
      'cardinality' => 1,
      'deleted' => 0,
      'entity_types' => array(),
      'field_name' => 'lop_literature_publication',
      'indexes' => array(
        'format' => array(
          0 => 'format',
        ),
      ),
      'locked' => 0,
      'module' => 'text',
      'settings' => array(),
      'translatable' => 0,
      'type' => 'text_long',
    );

    $field_bases['lop_int_mass_shell_leg_num'] = array(
      'active' => 1,
      'cardinality' => 1,
      'deleted' => 0,
      'entity_types' => array(),
      'field_name' => 'lop_int_mass_shell_leg_num',
      'indexes' => array(),
      'locked' => 0,
      'module' => 'number',
      'settings' => array(),
      'translatable' => 0,
      'type' => 'number_integer',
    );

    $field_bases['lop_leg_number'] = array(
      'active' => 1,
      'cardinality' => 1,
      'deleted' => 0,
      'entity_types' => array(),
      'field_name' => 'lop_leg_number',
      'indexes' => array(),
      'locked' => 0,
      'module' => 'number',
      'settings' => array(),
      'translatable' => 0,
      'type' => 'number_integer',
    );

    $field_bases['lop_light_like_leg_number'] = array(
      'active' => 1,
      'cardinality' => 1,
      'deleted' => 0,
      'entity_types' => array(),
      'field_name' => 'lop_light_like_leg_number',
      'indexes' => array(),
      'locked' => 0,
      'module' => 'number',
      'settings' => array(),
      'translatable' => 0,
      'type' => 'number_integer',
    );

    $field_bases['lop_vertex_number'] = array(
      'active' => 1,
      'cardinality' => 1,
      'deleted' => 0,
      'entity_types' => array(),
      'field_name' => 'lop_vertex_number',
      'indexes' => array(),
      'locked' => 0,
      'module' => 'number',
      'settings' => array(),
      'translatable' => 0,
      'type' => 'number_integer',
    );

    $field_bases['lop_loop_number'] = array(
      'active' => 1,
      'cardinality' => 1,
      'deleted' => 0,
      'entity_types' => array(),
      'field_name' => 'lop_loop_number',
      'indexes' => array(),
      'locked' => 0,
      'module' => 'number',
      'settings' => array(),
      'translatable' => 0,
      'type' => 'number_integer',
    );

    $field_bases['lop_mass_scale_number'] = array(
      'active' => 1,
      'cardinality' => 1,
      'deleted' => 0,
      'entity_types' => array(),
      'field_name' => 'lop_mass_scale_number',
      'indexes' => array(),
      'locked' => 0,
      'module' => 'number',
      'settings' => array(),
      'translatable' => 0,
      'type' => 'number_integer',
    );

    $field_bases['lop_massless_propagator_number'] = array(
      'active' => 1,
      'cardinality' => 1,
      'deleted' => 0,
      'entity_types' => array(),
      'field_name' => 'lop_massless_propagator_number',
      'indexes' => array(),
      'locked' => 0,
      'module' => 'number',
      'settings' => array(),
      'translatable' => 0,
      'type' => 'number_integer',
    );

    $field_bases['lop_massive_propagator_number'] = array(
      'active' => 1,
      'cardinality' => 1,
      'deleted' => 0,
      'entity_types' => array(),
      'field_name' => 'lop_massive_propagator_number',
      'indexes' => array(),
      'locked' => 0,
      'module' => 'number',
      'settings' => array(),
      'translatable' => 0,
      'type' => 'number_integer',
    );

    $field_bases['lop_off_shell_leg_number'] = array(
      'active' => 1,
      'cardinality' => 1,
      'deleted' => 0,
      'entity_types' => array(),
      'field_name' => 'lop_off_shell_leg_number',
      'indexes' => array(),
      'locked' => 0,
      'module' => 'number',
      'settings' => array(),
      'translatable' => 0,
      'type' => 'number_integer',
    );

    $field_bases['lop_propagator_number'] = array(
      'active' => 1,
      'cardinality' => 1,
      'deleted' => 0,
      'entity_types' => array(),
      'field_name' => 'lop_propagator_number',
      'indexes' => array(),
      'locked' => 0,
      'module' => 'number',
      'settings' => array(),
      'translatable' => 0,
      'type' => 'number_integer',
    );

    // Define allowed_values for the propagator masses
    $allowed_values_prop = array(
      'massless' => 'massless',
    );
    for ($i = 1; $i <= $max_num_prop; $i++)
    {
      $allowed_values_prop['m' . $i] = 'm' . $i;
    }


    for ($i = 1; $i <= $max_num_prop; $i++)
    {
      $field_bases['lop_propagator_' . $i . '_mass'] = array(
        'active' => 1,
        'cardinality' => 1,
        'deleted' => 0,
        'entity_types' => array(),
        'field_name' => 'lop_propagator_' . $i . '_mass',
        'indexes' => array(
          'value' => array(
            0 => 'value',
          ),
        ),
        'locked' => 0,
        'module' => 'list',
        'settings' => array(
          'allowed_values' => $allowed_values_prop,
          'allowed_values_function' => '',
        ),
        'translatable' => 0,
        'type' => 'list_text',
      );

      $field_bases['lop_propagator_' . $i . '_power'] = array(
        'active' => 1,
        'cardinality' => 1,
        'deleted' => 0,
        'entity_types' => array(),
        'field_name' => 'lop_propagator_' . $i . '_power',
        'indexes' => array(),
        'locked' => 0,
        'module' => 'number',
        'settings' => array(),
        'translatable' => 0,
        'type' => 'number_integer',
      );
    }



  //******************************************************************
  // old ones:

  // $field_bases['lop_term_reference'] = array(
  //   'active' => 1,
  //   'cardinality' => 1,
  //   'deleted' => 0,
  //   'entity_types' => array(),
  //   'field_name' => 'lop_term_reference',
  //   'indexes' => array(
  //     'tid' => array(
  //       0 => 'tid',
  //     ),
  //   ),
  //   'locked' => 1,
  //   'module' => 'taxonomy',
  //   'settings' => array(
  //     'allowed_values' => array(
  //       0 => array(
  //         'vocabulary' => 'lop_test_vocabulary',
  //         'parent' => 0,
  //       ),
  //     ),
  //   ),
  //   'translatable' => 0,
  //   'type' => 'taxonomy_term_reference',
  // );

  return $field_bases;
}



/**
 * Defines the field instances for lop_integral content type.
 *
 * @return array
 *   An associative array specifying the instances of fields we wish to
 *   add to lop_integral
 */
function _loopedia_integral_installed_instances()
{
  // These definitions are the same as in the beginning of
  // _loopedia_integral_installed_fields()
  $max_num_prop = 21;
  $max_num_leg = 20;

  $field_instances = array();


  $field_instances['lop_i_nickel'] = array(
    'bundle' => 'lop_integral',
    'default_value' => NULL,
    'deleted' => 0,
    'description' => '',
    'display' => array(
      'default' => array(
        'label' => 'above',
        'module' => 'text',
        'settings' => array(),
        'type' => 'text_default',
        'weight' => 16,
      ),
      'search_index' => array(
        'label' => 'above',
        'module' => 'text',
        'settings' => array(),
        'type' => 'text_default',
        'weight' => 0,
      ),
      'search_result' => array(
        'label' => 'above',
        'module' => 'text',
        'settings' => array(),
        'type' => 'text_default',
        'weight' => 0,
      ),
      'teaser' => array(
        'label' => 'above',
        'module' => 'text',
        'settings' => array(),
        'type' => 'text_default',
        'weight' => 0,
      ),
    ),
    'entity_type' => 'node',
    'field_name' => 'lop_nickel',
    'label' => 'Nickel Index',
    'required' => 0,
    'settings' => array(
      'text_processing' => 0,
      'user_register_form' => FALSE,
    ),
    'widget' => array(
      'active' => 1,
      'module' => 'text',
      'settings' => array(
        'size' => 60,
      ),
      'type' => 'text_textfield',
      'weight' => -4,
    ),
  );

  $field_instances['lop_i_picture_path'] = array(
    'bundle' => 'lop_integral',
    'default_value' => NULL,
    'deleted' => 0,
    'description' => '',
    'display' => array(
      'default' => array(
        'label' => 'above',
        'settings' => array(),
        'type' => 'hidden',
        'weight' => 0,
      ),
    ),
    'entity_type' => 'node',
    'field_name' => 'lop_picture_path',
    'label' => 'Picture Path',
    'required' => 0,
    'settings' => array(
      'text_processing' => 0,
      'user_register_form' => FALSE,
    ),
    'widget' => array(
      'active' => 1,
      'module' => 'text',
      'settings' => array(
        'size' => 60,
      ),
      'type' => 'text_textfield',
      'weight' => -4,
      'default_value' => 'This is the default value. You should not see this!',
    ),
  );




  $field_instances['lop_i_comment'] = array(
    'bundle' => 'lop_integral',
    'default_value' => NULL,
    'deleted' => 0,
    'description' => '',
    'display' => array(
      'default' => array(
        //
        // 'label' specifies how the label is displayed:
        // 'above' means the label is above the field content
        // 'inline' means the label is dispalyed on the same line as the
        //          field content.
        'label' => 'above',
        'module' => 'text',
        'settings' => array(),
        'type' => 'text_default',
        'weight' => 17,
      ),
      'search_index' => array(
        'label' => 'above',
        'settings' => array(),
        'type' => 'hidden',
        'weight' => 0,
      ),
      'search_result' => array(
        'label' => 'above',
        'settings' => array(),
        'type' => 'hidden',
        'weight' => 0,
      ),
      'teaser' => array(
        'label' => 'above',
        'settings' => array(),
        'type' => 'hidden',
        'weight' => 0,
      ),
    ),
    'entity_type' => 'node',
    'field_name' => 'lop_comment',
    'label' => 'Comments',
    'required' => 0,
    'settings' => array(
      'text_processing' => 0,
      'user_register_form' => FALSE,
    ),
    'widget' => array(
      'active' => 1,
      'module' => 'text',
      'settings' => array(
        'rows' => 5,
      ),
      'type' => 'text_textarea',
      'weight' => 23,
    ),
  );

  for ($i = 1; $i <= $max_num_leg; $i++)
  {
    $field_instances['lop_i_external_leg_' . $i . '_virtuality'] = array(
      'bundle' => 'lop_integral',
      'default_value' => NULL,
      'deleted' => 0,
      // 'description' => 'Choose the virtuality of external leg ' . $i . '. The choices are:
      //    <ul>
      //     <li>light-like : p^2 = 0</li>
      //     <li>on_internal_mass_shell : p^2 &ne; 0. But p is on a mass shell of one of the (internal) propagators: p^2 = m_j.</li>
      //     <li>off-shell: p is not light like and also not on one of the internal mass shells.</li>
      //   </ul> ',
      'display' => array(
        'default' => array(
          'label' => 'above',
          'module' => 'list',
          'settings' => array(),
          'type' => 'list_default',
          'weight' => 6,
        ),
        'search_index' => array(
          'label' => 'above',
          'settings' => array(),
          'type' => 'hidden',
          'weight' => 0,
        ),
        'search_result' => array(
          'label' => 'above',
          'settings' => array(),
          'type' => 'hidden',
          'weight' => 0,
        ),
        'teaser' => array(
          'label' => 'above',
          'settings' => array(),
          'type' => 'hidden',
          'weight' => 0,
        ),
      ),
      'entity_type' => 'node',
      'field_name' => 'lop_ext_leg_' . $i . '_virt',
      'label' => 'Leg ' . $i,
      'required' => 0,
      'settings' => array(
        'user_register_form' => FALSE,
      ),
      'widget' => array(
        'active' => 1,
        'module' => 'options',
        'settings' => array(),
        // 'options_select' -> drop-down selection
        // 'options_buttons' => buttons to select
        'type' => 'options_select',
        'weight' => 30 + $i,
      ),
    );
  }
  // end of for loop


  $field_instances['lop_i_literature_arxiv'] = array(
    'bundle' => 'lop_integral',
    'default_value' => NULL,
    'deleted' => 0,
    'description' => '',
    'display' => array(
      'default' => array(
        'label' => 'above',
        'module' => 'text',
        'settings' => array(),
        'type' => 'text_default',
        'weight' => 16,
      ),
      'search_index' => array(
        'label' => 'above',
        'settings' => array(),
        'type' => 'hidden',
        'weight' => 0,
      ),
      'search_result' => array(
        'label' => 'above',
        'settings' => array(),
        'type' => 'hidden',
        'weight' => 0,
      ),
      'teaser' => array(
        'label' => 'above',
        'settings' => array(),
        'type' => 'hidden',
        'weight' => 0,
      ),
    ),
    'entity_type' => 'node',
    'field_name' => 'lop_literature_arxiv',
    'label' => 'literature arxiv',
    'required' => 0,
    'settings' => array(
      'text_processing' => 0,
      'user_register_form' => FALSE,
    ),
    'widget' => array(
      'active' => 1,
      'module' => 'text',
      'settings' => array(
        'size' => 60,
      ),
      'type' => 'text_textfield',
      'weight' => 13,
    ),
  );

  $field_instances['lop_i_literature_publication'] = array(
    'bundle' => 'lop_integral',
    'default_value' => NULL,
    'deleted' => 0,
    'description' => '',
    'display' => array(
      'default' => array(
        'label' => 'above',
        'module' => 'text',
        'settings' => array(),
        'type' => 'text_default',
        'weight' => 15,
      ),
      'search_index' => array(
        'label' => 'above',
        'settings' => array(),
        'type' => 'hidden',
        'weight' => 0,
      ),
      'search_result' => array(
        'label' => 'above',
        'settings' => array(),
        'type' => 'hidden',
        'weight' => 0,
      ),
      'teaser' => array(
        'label' => 'above',
        'settings' => array(),
        'type' => 'hidden',
        'weight' => 0,
      ),
    ),
    'entity_type' => 'node',
    'field_name' => 'lop_literature_publication',
    'label' => 'literature publication',
    'required' => 0,
    'settings' => array(
      'text_processing' => 0,
      'user_register_form' => FALSE,
    ),
    'widget' => array(
      'active' => 1,
      'module' => 'text',
      'settings' => array(
        'rows' => 1,
      ),
      'type' => 'text_textarea',
      'weight' => 12,
    ),
  );

  // Internal Mass Shell leg Number Instance
  $field_instances['lop_i_int_mass_shell_leg_num'] = array(
    'bundle' => 'lop_integral',
    'default_value' => NULL,
    'deleted' => 0,
    'description' => '',
    'display' => array(
      'default' => array(
        'label' => 'above',
        'module' => 'number',
        'settings' => array(
          'decimal_separator' => '.',
          'prefix_suffix' => TRUE,
          'scale' => 0,
          'thousand_separator' => '',
        ),
        'type' => 'number_integer',
        'weight' => 10,
      ),
      'search_index' => array(
        'label' => 'above',
        'settings' => array(),
        'type' => 'hidden',
        'weight' => 0,
      ),
      'search_result' => array(
        'label' => 'above',
        'settings' => array(),
        'type' => 'hidden',
        'weight' => 0,
      ),
      'teaser' => array(
        'label' => 'above',
        'settings' => array(),
        'type' => 'hidden',
        'weight' => 0,
      ),
    ),
    'entity_type' => 'node',
    'field_name' => 'lop_int_mass_shell_leg_num',
    'label' => 'Number of legs on an internal mass shell',
    'required' => 0,
    'settings' => array(
      'max' => '',
      'min' => '',
      'prefix' => '',
      'suffix' => '',
      'user_register_form' => FALSE,
    ),
    'widget' => array(
      'active' => 0,
      'module' => 'number',
      'settings' => array(),
      'type' => 'number',
      'weight' => 6,
    ),
  );

  $field_instances['lop_i_leg_number'] = array(
    'bundle' => 'lop_integral',
    'default_value' => NULL,
    'deleted' => 0,
    'description' => 'This is the number of external legs.',
    'display' => array(
      'default' => array(
        'label' => 'above',
        'module' => 'number',
        'settings' => array(
          'decimal_separator' => '.',
          'prefix_suffix' => TRUE,
          'scale' => 0,
          'thousand_separator' => '',
        ),
        'type' => 'number_integer',
        'weight' => 7,
      ),
      'search_index' => array(
        'label' => 'above',
        'settings' => array(),
        'type' => 'hidden',
        'weight' => 0,
      ),
      'search_result' => array(
        'label' => 'above',
        'settings' => array(),
        'type' => 'hidden',
        'weight' => 0,
      ),
      'teaser' => array(
        'label' => 'above',
        'settings' => array(),
        'type' => 'hidden',
        'weight' => 0,
      ),
    ),
    'entity_type' => 'node',
    'field_name' => 'lop_leg_number',
    'label' => 'Number of legs',
    'required' => 0,
    'settings' => array(
      'max' => '',
      'min' => '',
      'prefix' => '',
      'suffix' => '',
      'user_register_form' => FALSE,
    ),
    'widget' => array(
      'active' => 0,
      'module' => 'number',
      'settings' => array(),
      'type' => 'number',
      'weight' => 4,
    ),
  );

  $field_instances['lop_i_light_like_leg_number'] = array(
    'bundle' => 'lop_integral',
    'default_value' => NULL,
    'deleted' => 0,
    'description' => 'This is the number of light-like legs.',
    'display' => array(
      'default' => array(
        'label' => 'above',
        'module' => 'number',
        'settings' => array(
          'decimal_separator' => '.',
          'prefix_suffix' => TRUE,
          'scale' => 0,
          'thousand_separator' => '',
        ),
        'type' => 'number_integer',
        'weight' => 9,
      ),
      'search_index' => array(
        'label' => 'above',
        'settings' => array(),
        'type' => 'hidden',
        'weight' => 0,
      ),
      'search_result' => array(
        'label' => 'above',
        'settings' => array(),
        'type' => 'hidden',
        'weight' => 0,
      ),
      'teaser' => array(
        'label' => 'above',
        'settings' => array(),
        'type' => 'hidden',
        'weight' => 0,
      ),
    ),
    'entity_type' => 'node',
    'field_name' => 'lop_light_like_leg_number',
    'label' => 'Number of light-like legs',
    'required' => 0,
    'settings' => array(
      'max' => '',
      'min' => '',
      'prefix' => '',
      'suffix' => '',
      'user_register_form' => FALSE,
    ),
    'widget' => array(
      'active' => 0,
      'module' => 'number',
      'settings' => array(),
      'type' => 'number',
      'weight' => 5,
    ),
  );

  $field_instances['lop_i_vertex_number'] = array(
    'bundle' => 'lop_integral',
    'default_value' => NULL,
    'deleted' => 0,
    'description' => 'This is the number of vertices.',
    'display' => array(
      'default' => array(
        'label' => 'above',
        'module' => 'number',
        'settings' => array(
          'decimal_separator' => '.',
          'prefix_suffix' => TRUE,
          'scale' => 0,
          'thousand_separator' => '',
        ),
        'type' => 'number_integer',
        'weight' => 8,
      ),
      'search_index' => array(
        'label' => 'above',
        'settings' => array(),
        'type' => 'hidden',
        'weight' => 0,
      ),
      'search_result' => array(
        'label' => 'above',
        'settings' => array(),
        'type' => 'hidden',
        'weight' => 0,
      ),
      'teaser' => array(
        'label' => 'above',
        'settings' => array(),
        'type' => 'hidden',
        'weight' => 0,
      ),
    ),
    'entity_type' => 'node',
    'field_name' => 'lop_vertex_number',
    'label' => 'Number of vertices',
    'required' => 0,
    'settings' => array(
      'max' => '',
      'min' => '',
      'prefix' => '',
      'suffix' => '',
      'user_register_form' => FALSE,
    ),
    'widget' => array(
      'active' => 0,
      'module' => 'number',
      'settings' => array(),
      'type' => 'number',
      'weight' => 8,
    ),
  );

  $field_instances['lop_i_loop_number'] = array(
    'bundle' => 'lop_integral',
    'default_value' => NULL,
    'deleted' => 0,
    'description' => 'This is the number of loops.',
    'display' => array(
      'default' => array(
        'label' => 'above',
        'module' => 'number',
        'settings' => array(
          'decimal_separator' => '.',
          'prefix_suffix' => TRUE,
          'scale' => 0,
          'thousand_separator' => '',
        ),
        'type' => 'number_integer',
        'weight' => 8,
      ),
      'search_index' => array(
        'label' => 'above',
        'settings' => array(),
        'type' => 'hidden',
        'weight' => 0,
      ),
      'search_result' => array(
        'label' => 'above',
        'settings' => array(),
        'type' => 'hidden',
        'weight' => 0,
      ),
      'teaser' => array(
        'label' => 'above',
        'settings' => array(),
        'type' => 'hidden',
        'weight' => 0,
      ),
    ),
    'entity_type' => 'node',
    'field_name' => 'lop_loop_number',
    'label' => 'Number of loops',
    'required' => 0,
    'settings' => array(
      'max' => '',
      'min' => '',
      'prefix' => '',
      'suffix' => '',
      'user_register_form' => FALSE,
    ),
    'widget' => array(
      'active' => 0,
      'module' => 'number',
      'settings' => array(),
      'type' => 'number',
      'weight' => 8,
    ),
  );

  $field_instances['lop_i_mass_scale_number'] = array(
    'bundle' => 'lop_integral',
    'default_value' => NULL,
    'deleted' => 0,
    'description' => '',
    'display' => array(
      'default' => array(
        'label' => 'above',
        'module' => 'number',
        'settings' => array(
          'decimal_separator' => '.',
          'prefix_suffix' => TRUE,
          'scale' => 0,
          'thousand_separator' => '',
        ),
        'type' => 'number_integer',
        'weight' => 12,
      ),
      'search_index' => array(
        'label' => 'above',
        'settings' => array(),
        'type' => 'hidden',
        'weight' => 0,
      ),
      'search_result' => array(
        'label' => 'above',
        'settings' => array(),
        'type' => 'hidden',
        'weight' => 0,
      ),
      'teaser' => array(
        'label' => 'above',
        'settings' => array(),
        'type' => 'hidden',
        'weight' => 0,
      ),
    ),
    'entity_type' => 'node',
    'field_name' => 'lop_mass_scale_number',
    'label' => 'Number of internal mass scales',
    'required' => 0,
    'settings' => array(
      'max' => '',
      'min' => '',
      'prefix' => '',
      'suffix' => '',
      'user_register_form' => FALSE,
    ),
    'widget' => array(
      'active' => 0,
      'module' => 'number',
      'settings' => array(),
      'type' => 'number',
      'weight' => 11,
    ),
  );

  $field_instances['lop_i_massless_propagator_number'] = array(
    'bundle' => 'lop_integral',
    'default_value' => NULL,
    'deleted' => 0,
    'description' => '',
    'display' => array(
      'default' => array(
        'label' => 'above',
        'module' => 'number',
        'settings' => array(
          'decimal_separator' => '.',
          'prefix_suffix' => TRUE,
          'scale' => 0,
          'thousand_separator' => '',
        ),
        'type' => 'number_integer',
        'weight' => 13,
      ),
      'search_index' => array(
        'label' => 'above',
        'settings' => array(),
        'type' => 'hidden',
        'weight' => 0,
      ),
      'search_result' => array(
        'label' => 'above',
        'settings' => array(),
        'type' => 'hidden',
        'weight' => 0,
      ),
      'teaser' => array(
        'label' => 'above',
        'settings' => array(),
        'type' => 'hidden',
        'weight' => 0,
      ),
    ),
    'entity_type' => 'node',
    'field_name' => 'lop_massless_propagator_number',
    'label' => 'Number of massless propagators',
    'required' => 0,
    'settings' => array(
      'max' => '',
      'min' => '',
      'prefix' => '',
      'suffix' => '',
      'user_register_form' => FALSE,
    ),
    'widget' => array(
      'active' => 0,
      'module' => 'number',
      'settings' => array(),
      'type' => 'number',
      'weight' => 10,
    ),
  );

  $field_instances['lop_i_massive_propagator_number'] = array(
    'bundle' => 'lop_integral',
    'default_value' => NULL,
    'deleted' => 0,
    'description' => '',
    'display' => array(
      'default' => array(
        'label' => 'above',
        'module' => 'number',
        'settings' => array(
          'decimal_separator' => '.',
          'prefix_suffix' => TRUE,
          'scale' => 0,
          'thousand_separator' => '',
        ),
        'type' => 'number_integer',
        'weight' => 13,
      ),
      'search_index' => array(
        'label' => 'above',
        'settings' => array(),
        'type' => 'hidden',
        'weight' => 0,
      ),
      'search_result' => array(
        'label' => 'above',
        'settings' => array(),
        'type' => 'hidden',
        'weight' => 0,
      ),
      'teaser' => array(
        'label' => 'above',
        'settings' => array(),
        'type' => 'hidden',
        'weight' => 0,
      ),
    ),
    'entity_type' => 'node',
    'field_name' => 'lop_massive_propagator_number',
    'label' => 'Number of massive propagators',
    'required' => 0,
    'settings' => array(
      'max' => '',
      'min' => '',
      'prefix' => '',
      'suffix' => '',
      'user_register_form' => FALSE,
    ),
    'widget' => array(
      'active' => 0,
      'module' => 'number',
      'settings' => array(),
      'type' => 'number',
      'weight' => 11,
    ),
  );


  $field_instances['lop_i_off_shell_leg_number'] = array(
    'bundle' => 'lop_integral',
    'default_value' => NULL,
    'deleted' => 0,
    'description' => 'This is the number of off-shell legs. Here, it means that the external leg is neither on a mass-shell of an (internal) propagator, nor is it massless.',
    'display' => array(
      'default' => array(
        'label' => 'above',
        'module' => 'number',
        'settings' => array(
          'decimal_separator' => '.',
          'prefix_suffix' => TRUE,
          'scale' => 0,
          'thousand_separator' => '',
        ),
        'type' => 'number_integer',
        'weight' => 11,
      ),
      'search_index' => array(
        'label' => 'above',
        'settings' => array(),
        'type' => 'hidden',
        'weight' => 0,
      ),
      'search_result' => array(
        'label' => 'above',
        'settings' => array(),
        'type' => 'hidden',
        'weight' => 0,
      ),
      'teaser' => array(
        'label' => 'above',
        'settings' => array(),
        'type' => 'hidden',
        'weight' => 0,
      ),
    ),
    'entity_type' => 'node',
    'field_name' => 'lop_off_shell_leg_number',
    'label' => 'Number of off-shell legs',
    'required' => 0,
    'settings' => array(
      'max' => '',
      'min' => '',
      'prefix' => '',
      'suffix' => '',
      'user_register_form' => FALSE,
    ),
    'widget' => array(
      'active' => 0,
      'module' => 'number',
      'settings' => array(),
      'type' => 'number',
      'weight' => 7,
    ),
  );

  $field_instances['lop_i_propagator_number'] = array(
    'bundle' => 'lop_integral',
    'default_value' => NULL,
    'deleted' => 0,
    'description' => '',
    'display' => array(
      'default' => array(
        'label' => 'above',
        'module' => 'number',
        'settings' => array(
          'decimal_separator' => '.',
          'prefix_suffix' => TRUE,
          'scale' => 0,
          'thousand_separator' => '',
        ),
        'type' => 'number_integer',
        'weight' => 14,
      ),
      'search_index' => array(
        'label' => 'above',
        'settings' => array(),
        'type' => 'hidden',
        'weight' => 0,
      ),
      'search_result' => array(
        'label' => 'above',
        'settings' => array(),
        'type' => 'hidden',
        'weight' => 0,
      ),
      'teaser' => array(
        'label' => 'above',
        'settings' => array(),
        'type' => 'hidden',
        'weight' => 0,
      ),
    ),
    'entity_type' => 'node',
    'field_name' => 'lop_propagator_number',
    'label' => 'Number of propagators',
    'required' => 0,
    'settings' => array(
      'max' => '',
      'min' => '',
      'prefix' => '',
      'suffix' => '',
      'user_register_form' => FALSE,
    ),
    'widget' => array(
      'active' => 0,
      'module' => 'number',
      'settings' => array(),
      'type' => 'number',
      'weight' => 9,
    ),
  );



  for ($i = 1; $i <= $max_num_prop; $i++)
  {
    $field_instances['lop_i_propagator_' . $i . '_mass'] = array(
      'bundle' => 'lop_integral',
      'default_value' => NULL,
      'deleted' => 0,
      // 'description' => 'Specify the mass of the propagator.',
      'display' => array(
        'default' => array(
          'label' => 'above',
          'module' => 'list',
          'settings' => array(),
          'type' => 'list_default',
          'weight' => 18,
        ),
        'search_index' => array(
          'label' => 'above',
          'settings' => array(),
          'type' => 'hidden',
          'weight' => 0,
        ),
        'search_result' => array(
          'label' => 'above',
          'settings' => array(),
          'type' => 'hidden',
          'weight' => 0,
        ),
        'teaser' => array(
          'label' => 'above',
          'settings' => array(),
          'type' => 'hidden',
          'weight' => 0,
        ),
      ),
      'entity_type' => 'node',
      'field_name' => 'lop_propagator_' . $i . '_mass',
      'label' => 'Mass of propagator ' . $i ,
      'required' => 0,
      'settings' => array(
        'user_register_form' => FALSE,
      ),
      'widget' => array(
        'active' => 1,
        'module' => 'options',
        'settings' => array(),
        'type' => 'options_select',
        'weight' => 40 + $i,
      ),
    );

    $field_instances['lop_i_propagator_' . $i . '_power'] = array(
      'bundle' => 'lop_integral',
      'default_value' => NULL,
      'deleted' => 0,
      'description' => '',
      'display' => array(
        'default' => array(
          'label' => 'above',
          'module' => 'number',
          'settings' => array(
            'decimal_separator' => '.',
            'prefix_suffix' => TRUE,
            'scale' => 0,
            'thousand_separator' => '',
          ),
          'type' => 'number_integer',
          'weight' => 19,
        ),
        'search_index' => array(
          'label' => 'above',
          'settings' => array(),
          'type' => 'hidden',
          'weight' => 0,
        ),
        'search_result' => array(
          'label' => 'above',
          'settings' => array(),
          'type' => 'hidden',
          'weight' => 0,
        ),
        'teaser' => array(
          'label' => 'above',
          'settings' => array(),
          'type' => 'hidden',
          'weight' => 0,
        ),
      ),
      'entity_type' => 'node',
      'field_name' => 'lop_propagator_' . $i . '_power',
      'label' => 'Power of propagator ' . $i,
      'required' => 0,
      'settings' => array(
        'max' => '',
        'min' => '',
        'prefix' => '',
        'suffix' => '',
        'user_register_form' => FALSE,
      ),
      'widget' => array(
        'active' => 0,
        'module' => 'number',
        'settings' => array(),
        'type' => 'number',
        'weight' => 50 + $i,
      ),
    );
  }



//****************************************************************
// old ones:


  // $field_instances['lop_integral-lop_term_reference'] = array(
  //   'bundle' => 'lop_integral',
  //   'default_value' => NULL,
  //   'deleted' => 0,
  //   'description' => 'Help text',
  //   'display' => array(
  //     'default' => array(
  //       //
  //       // 'label' specifies how the label is displayed:
  //       // 'above' means the label is above the field content
  //       // 'inline' means the label is dispalyed on the same line as the
  //       //          field content.
  //       'label' => 'above',
  //       'module' => 'taxonomy',
  //       'settings' => array(),
  //       //
  //       // 'type' determines how it is displayed:
  //       // 'taxonomy_term_reference_link' -> link
  //       // 'taxonomy_term_reference_plain' -> Plain text
  //       // 'taxonomy_term_reference_rss_category' -> RSS category
  //       // 'hidden' -> <Hidden> ; not visible
  //       'type' => 'taxonomy_term_reference_link',
  //       'weight' => 2,
  //     ),
  //     'teaser' => array(
  //       'label' => 'above',
  //       'settings' => array(),
  //       'type' => 'hidden',
  //       'weight' => 0,
  //     ),
  //   ),
  //   'entity_type' => 'node',
  //   'field_name' => 'lop_term_reference',
  //   'label' => 'features term reference',
  //   'required' => 0,
  //   'settings' => array(
  //     'user_register_form' => FALSE,
  //   ),
  //   'widget' => array(
  //     'active' => 1,
  //     'module' => 'options',
  //     'settings' => array(),
  //     // type:
  //     // 'options_selectoptions_select' -> Select list
  //     // 'options_buttons' -> Check boxes/radio buttons
  //     // 'taxonomy_autocomplete' -> Autocomplete term widget (tagging)
  //     'type' => 'options_selectoptions_select',
  //     'weight' => 4,
  //   ),
  // );

  return $field_instances;
}
