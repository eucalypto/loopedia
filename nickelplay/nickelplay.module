<?php

/**
 * @file
 * Module file for my Nickel play module
 */


/**
 * Implements hook_menu().
 */
function nickelplay_menu()
{
  $items = array();

  $items['nickelplay'] = array( // This creates a URL that
                                // will call this form at "nickelplay"
    'title' => 'Nickel', //page title
    'description' => 'A form for playing with nickel indices',
    'page callback' => 'drupal_get_form',  // This is the function that will
                                           // be called when the page is
                                           // accessed.  for a form, use
                                           // drupal_get_form
    'page arguments' => array('nickelplay_form'),
    'access callback' => TRUE,
  );

  return $items;
}



function nickelplay_form($form, &$form_state)
{
  // This is how you insert HTML into a form:
  // $form['html_text'] = array(
  //   '#markup' => t('<p>Hello there. You are reading me right now!</p>')
  // );

  $form['guidance'] = array(
    '#type' => 'fieldset',
    '#title' => t('Help'),
    '#collapsible' => true,
  );

  $form['guidance']['adjalist'] = array(
    '#type' => 'item',
    '#title' => t('Adjacency List'),
    '#description' => t('An adjacency list is a list of connections between vertices. Please label the vertices after a non-negative integers (0, 1, 3, 23, ...). And external "vertices" are labelled with a "-1".<br> An example of an adjacency list would be "[-1, 1], [1, 2], [1, 2], [1, 2], [2, -1]" for the Sunrise diagram.'),
  );

  $form['guidance']['nickel'] = array(
    '#type' => 'item',
    '#title' => t('Nickel Index'),
    '#description' => t('A Nickel Index is a string consisting of several parts. Each part is closed with a "|" (vertical bar)')
  );

  $form['selection'] = array(
    '#type' => 'radios',
    '#options' => array(
      'nickel'   => t('Nickel Index'),
      'adjalist' => t('Adjacency List'),
    ),
    '#title' => t('Choose if you want to provide a Nickel Index or an Adjacency List')
  );

  $form['nickel'] = array(
    '#type' => 'textfield',
    '#title' => 'Nickel Index',
    '#size' => 80,
    // '#required' => TRUE, //make this field required

    // Only show this field if "nickel index" was selected.
    '#states' => array(
      'visible' => array(
        ':input[name="selection"]' => array('value' => 'nickel'),
      ),
    ),
  );

  $form['adjalist'] = array(
    '#type' => 'textfield',
    '#title' => 'Adjacency List',
    '#size' => 80,
    '#maxlength' => 400,
    // '#required' => TRUE,

    // Only show this filed if "adjacency list" was selected.
    '#states' => array(
      'visible' => array(
        ':input[name="selection"]' => array('value' => 'adjalist'),
      ),
    ),
  );

  // dpm($form_state);
  if (isset($form_state['imagepath']))
  {
    if ($form_state['values']['selection'] == 'adjalist')
    {
      $form['calculatednickel'] = array(
        '#type' => 'item',
        '#title' => t('Correspondung Nickel Index: "@nickel"', array(
          '@nickel' => $form_state['values']['nickel'],
        )),
      );
    }

    $form['html_text1'] = array(
      '#markup' => t('<img src="'. $form_state['imagepath'] .
                      ' "alt="alternative text">')
      );
  }

  $form['submit_button'] = array(
    '#type' => 'submit',
    '#value' => t('Click Here!'),
  );

  return $form;
}


/**
 * Implements hook_form_validate().
 *
 * This is where the validation of the entries happens.
 */
function nickelplay_form_validate($form, &$form_state)
{
  if ($form_state['values']['selection'] == 'adjalist')
  {
    // Begin of the check of the given adjacency list

    // Check if the given adjacency list string contains forbidden characters.
    // Allowed ones are ",", "-", "[", "]", "0-9", " "
    if (preg_match('/^[,\[\]0-9\s-]*$/', $form_state['values']['adjalist']) !== 1)
    {
      form_set_error('adjalist', t(
      'Your adjacency list seems to contain not allowed characters. The allowed ones are: "[comma]", "-", "[", "]", "0-9", "[whitespace]"'
    ));
    }



    // Calculate the Nickel index from the given Adjacency List
    $exec0 = "python sites/default/scripts/edgelist_to_nickel.py " .
              escapeshellarg($form_state['values']['adjalist']) .
              " 2>&1";
    $generated_nickel = trim(shell_exec($exec0));



    // If the script outputs more than one line (nickel index), then there must
    // have been an error. So if the output $generated_nickel contains a newline
    // character ("\n" == PHP_EOL), an error is displayed.
    // http://stackoverflow.com/questions/9437121/how-to-detect-if-a-string-has-a-new-line-break-in-it
    if (strpos($generated_nickel, PHP_EOL) !== false)
    {
      form_set_error('adjalist', t(
        "There seems to be a problem with your adjacency list."
      ));
    }
    else
    {
      $form_state['values']['nickel'] = $generated_nickel;
    }

    // End of check of the given adjacency list.
  }
  else
  {
    // Begin of checking of the given nickel index.
    $nickel_value_given = $form_state['values']['nickel'];

    // Check the formal structure of the given index: it shall only contain "e",
    // "0-9" and "|".
    if (preg_match('/^[e0-9\|]*$/', $nickel_value_given) !== 1)
    {
      form_set_error('nickel', t('Your Nickel Index seems to contain other characters than the allowed: "e", "0-9", "|".'));
    }


    // Check, if given Nickel index is correct(minimal).

    // When drupal executes a script, it starts in the project path e.g.
    // /var/www/html/drupal_project/ , where the "sites/" folder is.
    $exec1 = "python sites/default/scripts/minimalnickel.py " .
               escapeshellarg($nickel_value_given) .
               " 2>&1";
    $nickel_value_correct = trim(shell_exec($exec1)); // Correct Nickel Index
                            // calculated by script.  trim() was needed here
                            // because shell_exec() produces one unwanted
                            // whitespace at the end of the output string


    if ( strlen($nickel_value_given) != strlen($nickel_value_correct) )
    {
      // GraphState outputs a (long) error message if the nickel string argument
      // is wrong according to the convention. So if the output of the script
      // has not the same length as the given nickel string, something went
      // wrong.

      form_set_error('nickel', t(
        'Your nickel index "@ni_given" seems to be wrong. Please check if it is according to the conventions.',
        array(
        '@ni_given' => $nickel_value_given,
        )
      ));
    }
    elseif ( $nickel_value_given != $nickel_value_correct )
    {
      // If the given string has the same length as the outupt but is not equal,
      // then the given nickel index is not minimal.

      form_set_error('nickel', t('The given nickel index: "@ni_given" is not correct (minimal). Please use the right Nickel index: "@ni_correct".',
        array(
          '@ni_given' => $nickel_value_given,
          '@ni_correct' => $nickel_value_correct,
        )
      ));
    }
    else
    {
      drupal_set_message(t('The Nickel index "@nickel" is correct!',
        array('@nickel' => $nickel_value_correct)
      ));
    }

    // End of checking the Nickel index.
  }


}

/**
 * Implements hook_form_submit()
 *
 * Here is everything that is not just validation of the user input.
 */
function nickelplay_form_submit($form, &$form_state)
{
  // Generate Picture to Nickel Index
  $image_path = "sites/default/files/tmp/" .
                  uniqid($form_state['values']['nickel']);
                 // this is the path to the dot file the image (svg) file will
                 // have an extra ending of ".svg"
  $script_path = "sites/default/scripts/neato_from_nickel.py";
  $exec2 = escapeshellcmd("python $script_path " .
                           $form_state['values']['nickel'] .
                           " $image_path");
  exec($exec2);
  $form_state['imagepath'] = $image_path . ".svg";

  drupal_set_message('This should only appear when no error is given!<br />' . $exec2);

  $form_state['rebuild'] = TRUE;
}
